import os
import logging
import json
import csv
import asyncio
from io import StringIO
from datetime import datetime, timedelta
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler

temp_storage = {}  # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
confirm_clear = {} # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json", "r", encoding="utf-8") as config_file:
    CONFIG = json.load(config_file)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
with open("messages.json", "r", encoding="utf-8") as messages_file:
    MESSAGES = json.load(messages_file)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=CONFIG["BOT_TOKEN"])
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def get_db():
    return await asyncpg.connect(
        user=CONFIG["DB_USER"],
        password=CONFIG["DB_PASSWORD"],
        database=CONFIG["DB_NAME"],
        host=CONFIG["DB_HOST"]
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer(
        MESSAGES["start"],
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º username, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number
    username = message.from_user.username

    # –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
    if not username:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        temp_storage[message.from_user.id] = {"phone": phone}
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à @username –≤—Ä—É—á–Ω—É—é:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await save_participant(message.from_user.id, username, phone)
    await message.answer(
        MESSAGES["registration_success"],
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ username
@dp.message(F.text & ~F.text.startswith('/'))
async def handle_username_input(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å username
    if not (message.reply_to_message and
            "–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à @username" in message.reply_to_message.text):
        return

    username = message.text.strip('@')  # –£–¥–∞–ª—è–µ–º @, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
    phone = None  # –ù–æ–º–µ—Ä –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è username
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –ë–î –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    temp_storage = {}

    # –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if not username:
        temp_storage[message.from_user.id] = {"phone": phone}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ @username:")
        return

    # –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ username
    if message.from_user.id in temp_storage:
        data = temp_storage.pop(message.from_user.id)
        await save_participant(message.from_user.id, username, data["phone"])

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à username —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
async def save_participant(user_id: int, username: str, phone: str):
    conn = None
    try:
        conn = await get_db()
        await conn.execute(
            """INSERT INTO participants 
            (telegram_user_id, username, phone_number) 
            VALUES ($1, $2, $3)""",
            user_id, username, phone
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
        raise
    finally:
        if conn:
            await conn.close()

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminders():
    conn = None
    try:
        conn = await get_db()
        participants = await conn.fetch(
            """SELECT telegram_user_id FROM participants 
            WHERE reminder_sent = False 
            AND registration_time < NOW() - INTERVAL '24 hours'"""
        )

        for participant in participants:
            try:
                await bot.send_message(
                    participant["telegram_user_id"],
                    MESSAGES["reminder"]
                )
                await conn.execute(
                    """UPDATE participants SET reminder_sent = True 
                    WHERE telegram_user_id = $1""",
                    participant["telegram_user_id"]
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î –≤ send_reminders: {e}")
    finally:
        if conn:
            await conn.close()

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("list"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_list(message: types.Message):
    conn = None
    try:
        conn = await get_db()
        count = await conn.fetchval("SELECT COUNT(*) FROM participants")
        await message.answer(MESSAGES["admin"]["list"].format(count))

        if conn == 0:
            await message.answer(MESSAGES["admin"]["db_empty"])
        else:
            participants = await conn.fetch("SELECT * FROM participants LIMIT 10")
            data = "\n".join(
                [f"ID: {p['id']}, User: @{p['username']}, Phone: {p['phone_number']}"
                 for p in participants]
            )
            await message.answer(MESSAGES["admin"]["list"].format(count))
            await message.answer(MESSAGES["admin"]["db_data"].format(data=data))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        if conn:
            await conn.close()


@dp.message(Command("export"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_export(message: types.Message):
    conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        conn = await get_db()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        participants = await conn.fetch("""
            SELECT id, telegram_user_id, username, phone_number, 
                   registration_time AT TIME ZONE 'Europe/Moscow' AS registration_time,
                   reminder_sent
            FROM participants
            ORDER BY registration_time DESC
        """)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if not participants:
            await message.answer(MESSAGES["admin"]["db_empty"])
            return

        # –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        csv_file = StringIO()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
        fieldnames = [
            "ID", "Telegram ID", "Username", "Phone Number",
            "Registration Time (MSK)", "Reminder Sent"
        ]

        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        writer.writeheader()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        for record in participants:
            writer.writerow({
                "ID": record["id"],
                "Telegram ID": record["telegram_user_id"],
                "Username": f"@{record['username']}" if record["username"] else "N/A",
                "Phone Number": record["phone_number"],
                "Registration Time (MSK)": record["registration_time"].strftime("%Y-%m-%d %H:%M:%S"),
                "Reminder Sent": "‚úì" if record["reminder_sent"] else "‚úó"
            })

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        filename = f"participants_{datetime.now().strftime('%Y-%m-%d')}.csv"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await message.answer_document(
            types.BufferedInputFile(
                csv_file.getvalue().encode('utf-8-sig'),  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
                filename=filename
            ),
            caption=MESSAGES["admin"]["export_success"]
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logging.info(f"Admin {message.from_user.id} exported participants list")

    except Exception as e:
        logging.error(f"Export error: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
    finally:
        if conn:
            await conn.close()

@dp.message(Command("broadcast"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_broadcast(message: types.Message):
    conn = None
    try:
        text = message.text.split(" ", 1)[1]
        conn = await get_db()
        participants = await conn.fetch("SELECT telegram_user_id FROM participants")

        if not participants:
            await message.answer(MESSAGES["admin"]["db_empty"])
            return

        success = 0
        for participant in participants:
            try:
                await bot.send_message(participant["telegram_user_id"], text)
                success += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant['telegram_user_id']}: {e}")
                continue

        await message.answer(
            MESSAGES["admin"]["broadcast_success"].format(success)
        )
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç>")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
    finally:
        if conn:
            await conn.close()


# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("db_data"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_db_data(message: types.Message):
    conn = None
    try:
        conn = await get_db()
        participants = await conn.fetch("SELECT * FROM participants LIMIT 50")

        if not participants:
            await message.answer(MESSAGES["admin"]["db_empty"])
            return

        data = "\n".join(
            f"{p['id']}: @{p['username'] or 'N/A'} | {p['phone_number']} | {p['registration_time']}"
            for p in participants
        )
        await message.answer(MESSAGES["admin"]["db_data"].format(data=data))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        if conn:
            await conn.close()


@dp.message(Command("db_empty"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_db_empty(message: types.Message):
    conn = None
    try:
        conn = await get_db()
        count = await conn.fetchval("SELECT COUNT(*) FROM participants")
        await message.answer(MESSAGES["admin"]["db_empty"] if count == 0 else "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î")
    finally:
        if conn:
            await conn.close()


# –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@dp.message(Command("clear_db"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_clear_db(message: types.Message):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm_clear[message.from_user.id] = True
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–ê' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–ï–¢' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )


@dp.message(F.text.in_({"–î–ê", "–ù–ï–¢"}) & F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def handle_clear_confirmation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in confirm_clear:
        return

    if message.text == "–ù–ï–¢":
        del confirm_clear[user_id]
        await message.answer("–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ "–î–ê"
    conn = None
    try:
        conn = await get_db()
        count = await conn.fetchval("SELECT COUNT(*) FROM participants")

        if count == 0:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø—É—Å—Ç–∞")
            return

        await conn.execute("TRUNCATE TABLE participants RESTART IDENTITY CASCADE")
        await message.answer(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    finally:
        if conn:
            await conn.close()
        confirm_clear.pop(user_id, None)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@dp.message(Command("delete_user"), F.from_user.id.in_(CONFIG["ADMIN_IDS"]))
async def cmd_delete_user(message: types.Message):
    try:
        # –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete_user <user_id>
        user_id = int(message.text.split()[1])

        conn = await get_db()
        result = await conn.execute(
            "DELETE FROM participants WHERE telegram_user_id = $1",
            user_id
        )

        if result == "DELETE 1":
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_user <user_id>")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        if 'conn' in locals():
            await conn.close()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ event loop
    scheduler.add_job(send_reminders, "interval", minutes=30)
    scheduler.start()

    try:
        await dp.start_polling(bot)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.shutdown()


if __name__ == "__main__":
    asyncio.run(main())