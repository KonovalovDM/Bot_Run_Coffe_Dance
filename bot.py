import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, timedelta
import asyncpg
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
EVENT_DATE = datetime(2024, 12, 15)  # –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
ADMIN_IDS = [123456789]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def get_db():
    return await asyncpg.connect(
        user="postgres", password="password", database="event_bot", host="localhost"
    )
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True))
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∏–∫ –≤ Telegram.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ + username)
@dp.message(F.contact)
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    conn = await get_db()
    await conn.execute(
        "INSERT INTO participants (telegram_user_id, username, phone_number, registration_time) "
        "VALUES ($1, $2, $3, $4)",
        message.from_user.id, username, phone, datetime.now()
    )
    await conn.close()

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª. "
        "–ó–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–µ!",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (APScheduler)
scheduler = AsyncIOScheduler()


async def send_reminders():
    conn = await get_db()
    participants = await conn.fetch(
        "SELECT telegram_user_id FROM participants "
        "WHERE reminder_sent = False AND registration_time < $1",
        datetime.now() - timedelta(hours=24)
    )

    for participant in participants:
        await bot.send_message(
            participant["telegram_user_id"],
            "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª! –ñ–¥—ë–º –≤–∞—Å!"
        )
        await conn.execute(
            "UPDATE participants SET reminder_sent = True WHERE telegram_user_id = $1",
            participant["telegram_user_id"]
        )

    await conn.close()


# –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
scheduler.add_job(send_reminders, "interval", minutes=30)
scheduler.start()

# –ö–æ–º–∞–Ω–¥—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# /list - —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message(Command("list"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_list(message: types.Message):
    conn = await get_db()
    count = await conn.fetchval("SELECT COUNT(*) FROM participants")
    await message.answer(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}")
    await conn.close()

# /export - –í—ã–≥—Ä—É–∑–∫–∞ –≤ CSV
import csv
from io import StringIO


@dp.message(Command("export"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_export(message: types.Message):
    conn = await get_db()
    participants = await conn.fetch("SELECT * FROM participants")

    csv_file = StringIO()
    writer = csv.DictWriter(csv_file, fieldnames=["id", "username", "phone_number"])
    writer.writeheader()
    writer.writerows([dict(record) for record in participants])

    await message.answer_document(
        types.BufferedInputFile(csv_file.getvalue().encode(), filename="participants.csv")
    )
    await conn.close()

# /broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("broadcast"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_broadcast(message: types.Message):
    text = message.text.split(" ", 1)[1]  # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast
    conn = await get_db()
    participants = await conn.fetch("SELECT telegram_user_id FROM participants")

    for participant in participants:
        try:
            await bot.send_message(participant["telegram_user_id"], text)
        except Exception:
            pass  # –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    await message.answer(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
    await conn.close()

# –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL)
CREATE TABLE participants (
    id SERIAL PRIMARY KEY,
    telegram_user_id BIGINT UNIQUE NOT NULL,
    username VARCHAR(255),
    phone_number VARCHAR(20) NOT NULL,
    registration_time TIMESTAMP DEFAULT NOW(),
    reminder_sent BOOLEAN DEFAULT FALSE
);

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
import asyncio

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())